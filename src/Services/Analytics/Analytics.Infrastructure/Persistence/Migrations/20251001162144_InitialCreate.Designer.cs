// <auto-generated />
using System;
using Analytics.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Analytics.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AnalyticsDbContext))]
    [Migration("20251001162144_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("analytics")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Analytics.Domain.Aggregates.CustomerMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageOrderValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("average_order_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("customer_email");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerSegment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_segment");

                    b.Property<int>("DaysSinceLastOrder")
                        .HasColumnType("integer")
                        .HasColumnName("days_since_last_order");

                    b.Property<DateTime>("FirstOrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_order_date");

                    b.Property<DateTime?>("LastOrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_order_date");

                    b.Property<decimal>("LifetimeValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("lifetime_value");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer")
                        .HasColumnName("total_orders");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_metrics_customer_id");

                    b.HasIndex("CustomerSegment")
                        .HasDatabaseName("ix_customer_metrics_segment");

                    b.HasIndex("LifetimeValue")
                        .HasDatabaseName("ix_customer_metrics_lifetime_value");

                    b.ToTable("customer_metrics", "analytics");
                });

            modelBuilder.Entity("Analytics.Domain.Aggregates.OrderMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageOrderValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("average_order_value");

                    b.Property<int>("CancelledOrders")
                        .HasColumnType("integer")
                        .HasColumnName("cancelled_orders");

                    b.Property<int>("CompletedOrders")
                        .HasColumnType("integer")
                        .HasColumnName("completed_orders");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("metric_date");

                    b.Property<int>("PendingOrders")
                        .HasColumnType("integer")
                        .HasColumnName("pending_orders");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer")
                        .HasColumnName("total_orders");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_revenue");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MetricDate")
                        .HasDatabaseName("ix_order_metrics_metric_date");

                    b.ToTable("order_metrics", "analytics");
                });

            modelBuilder.Entity("Analytics.Domain.Aggregates.ProductMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AddToCartCount")
                        .HasColumnType("integer")
                        .HasColumnName("add_to_cart_count");

                    b.Property<decimal>("ConversionRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("conversion_rate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("InventoryLevel")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_level");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("metric_date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("product_name");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_revenue");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseCount")
                        .HasDatabaseName("ix_product_metrics_purchase_count");

                    b.HasIndex("ProductId", "MetricDate")
                        .HasDatabaseName("ix_product_metrics_product_date");

                    b.ToTable("product_metrics", "analytics");
                });

            modelBuilder.Entity("Analytics.Domain.Aggregates.RevenueMetrics", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageTransactionValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("average_transaction_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<int>("Granularity")
                        .HasColumnType("integer")
                        .HasColumnName("granularity");

                    b.Property<DateTime>("MetricDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("metric_date");

                    b.Property<decimal>("NetRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("net_revenue");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("refunded_amount");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_revenue");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MetricDate", "Granularity")
                        .HasDatabaseName("ix_revenue_metrics_date_granularity");

                    b.ToTable("revenue_metrics", "analytics");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.DeadLetterQueue.DeadLetterMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text")
                        .HasColumnName("error_details");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("FailureReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("failure_reason");

                    b.Property<DateTime>("MovedToDlqAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moved_to_dlq_at");

                    b.Property<string>("OperatorNotes")
                        .HasColumnType("text")
                        .HasColumnName("operator_notes");

                    b.Property<Guid?>("OriginalMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_message_id");

                    b.Property<DateTime>("OriginalTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("original_timestamp");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<bool>("Reprocessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("reprocessed");

                    b.Property<DateTime?>("ReprocessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reprocessed_at");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_name");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("total_attempts");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_dlq_correlation_id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_dlq_event_type");

                    b.HasIndex("MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_moved_at");

                    b.HasIndex("Reprocessed")
                        .HasDatabaseName("idx_dlq_reprocessed");

                    b.HasIndex("ServiceName")
                        .HasDatabaseName("idx_dlq_service_name");

                    b.HasIndex("ServiceName", "Reprocessed", "MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_service_status_date");

                    b.ToTable("dead_letter_messages", "analytics");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("ProcessingAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_attempts");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_inbox_correlation_id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasDatabaseName("idx_inbox_event_id_unique");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_inbox_processed_at");

                    b.HasIndex("ReceivedAt")
                        .HasDatabaseName("idx_inbox_received_at");

                    b.HasIndex("ProcessedAt", "ProcessingAttempts")
                        .HasDatabaseName("idx_inbox_unprocessed");

                    b.ToTable("inbox_messages", "analytics");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_outbox_correlation_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("idx_outbox_occurred_at");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_outbox_processed_at");

                    b.HasIndex("ProcessedAt", "RetryCount")
                        .HasDatabaseName("idx_outbox_unprocessed");

                    b.ToTable("outbox_messages", "analytics");
                });
#pragma warning restore 612, 618
        }
    }
}
