// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shipping.Infrastructure.Persistence;

#nullable disable

namespace Shipping.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ShippingDbContext))]
    partial class ShippingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shipping")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingBlocks.Infrastructure.DeadLetterQueue.DeadLetterMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text")
                        .HasColumnName("error_details");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("FailureReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("failure_reason");

                    b.Property<DateTime>("MovedToDlqAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moved_to_dlq_at");

                    b.Property<string>("OperatorNotes")
                        .HasColumnType("text")
                        .HasColumnName("operator_notes");

                    b.Property<Guid?>("OriginalMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_message_id");

                    b.Property<DateTime>("OriginalTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("original_timestamp");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<bool>("Reprocessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("reprocessed");

                    b.Property<DateTime?>("ReprocessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reprocessed_at");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_name");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("total_attempts");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_dlq_correlation_id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_dlq_event_type");

                    b.HasIndex("MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_moved_at");

                    b.HasIndex("Reprocessed")
                        .HasDatabaseName("idx_dlq_reprocessed");

                    b.HasIndex("ServiceName")
                        .HasDatabaseName("idx_dlq_service_name");

                    b.HasIndex("ServiceName", "Reprocessed", "MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_service_status_date");

                    b.ToTable("dead_letter_messages", "shipping");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Consumer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("consumer");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("ProcessingAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_attempts");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_inbox_correlation_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_inbox_processed_at");

                    b.HasIndex("ReceivedAt")
                        .HasDatabaseName("idx_inbox_received_at");

                    b.HasIndex("EventId", "Consumer")
                        .IsUnique()
                        .HasDatabaseName("idx_inbox_event_consumer_unique");

                    b.HasIndex("ProcessedAt", "ProcessingAttempts")
                        .HasDatabaseName("idx_inbox_unprocessed");

                    b.ToTable("inbox_messages", "shipping");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_outbox_correlation_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("idx_outbox_occurred_at");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_outbox_processed_at");

                    b.HasIndex("ProcessedAt", "RetryCount")
                        .HasDatabaseName("idx_outbox_unprocessed");

                    b.ToTable("outbox_messages", "shipping");
                });

            modelBuilder.Entity("Shipping.Domain.Aggregates.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualDelivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CarrierTrackingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<int>("DeliveryAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("DeliverySpeed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastDeliveryFailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PickupTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SignatureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Status");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("Shipments", "shipping", t =>
                        {
                            t.Property("RecipientName")
                                .HasColumnName("Shipment_RecipientName");
                        });
                });

            modelBuilder.Entity("Shipping.Domain.Aggregates.Shipment", b =>
                {
                    b.OwnsOne("Shipping.Domain.ValueObjects.Package", "Package", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DimensionUnit")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("PackageDimensionUnit");

                            b1.Property<decimal>("Height")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PackageHeight");

                            b1.Property<decimal>("Length")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PackageLength");

                            b1.Property<decimal>("Weight")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PackageWeight");

                            b1.Property<string>("WeightUnit")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("PackageWeightUnit");

                            b1.Property<decimal>("Width")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PackageWidth");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipments", "shipping");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.OwnsOne("Shipping.Domain.ValueObjects.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("AddressLine1");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("AddressLine2");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("Email")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Phone");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("RecipientName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("RecipientName");

                            b1.Property<string>("StateOrProvince")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("StateOrProvince");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipments", "shipping");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.OwnsMany("Shipping.Domain.ValueObjects.TrackingInfo", "TrackingHistory", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("Id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Coordinates")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)");

                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("ShipmentId");

                            b1.ToTable("ShipmentTrackingHistory", "shipping");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });

                    b.Navigation("Package")
                        .IsRequired();

                    b.Navigation("ShippingAddress")
                        .IsRequired();

                    b.Navigation("TrackingHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
