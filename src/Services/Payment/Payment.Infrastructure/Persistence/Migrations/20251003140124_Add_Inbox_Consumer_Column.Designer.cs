// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payment.Infrastructure.Persistence;

#nullable disable

namespace Payment.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    [Migration("20251003140124_Add_Inbox_Consumer_Column")]
    partial class Add_Inbox_Consumer_Column
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("payment")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingBlocks.Infrastructure.DeadLetterQueue.DeadLetterMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text")
                        .HasColumnName("error_details");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("FailureReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("failure_reason");

                    b.Property<DateTime>("MovedToDlqAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moved_to_dlq_at");

                    b.Property<string>("OperatorNotes")
                        .HasColumnType("text")
                        .HasColumnName("operator_notes");

                    b.Property<Guid?>("OriginalMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_message_id");

                    b.Property<DateTime>("OriginalTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("original_timestamp");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<bool>("Reprocessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("reprocessed");

                    b.Property<DateTime?>("ReprocessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reprocessed_at");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_name");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("total_attempts");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_dlq_correlation_id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("idx_dlq_event_type");

                    b.HasIndex("MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_moved_at");

                    b.HasIndex("Reprocessed")
                        .HasDatabaseName("idx_dlq_reprocessed");

                    b.HasIndex("ServiceName")
                        .HasDatabaseName("idx_dlq_service_name");

                    b.HasIndex("ServiceName", "Reprocessed", "MovedToDlqAt")
                        .HasDatabaseName("idx_dlq_service_status_date");

                    b.ToTable("dead_letter_messages", "payment");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Consumer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("consumer");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("ProcessingAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("processing_attempts");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_inbox_correlation_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_inbox_processed_at");

                    b.HasIndex("ReceivedAt")
                        .HasDatabaseName("idx_inbox_received_at");

                    b.HasIndex("EventId", "Consumer")
                        .IsUnique()
                        .HasDatabaseName("idx_inbox_event_consumer_unique");

                    b.HasIndex("ProcessedAt", "ProcessingAttempts")
                        .HasDatabaseName("idx_inbox_unprocessed");

                    b.ToTable("inbox_messages", "payment");
                });

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("idx_outbox_correlation_id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("idx_outbox_occurred_at");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_outbox_processed_at");

                    b.HasIndex("ProcessedAt", "RetryCount")
                        .HasDatabaseName("idx_outbox_unprocessed");

                    b.ToTable("outbox_messages", "payment");
                });

            modelBuilder.Entity("Payment.Domain.Aggregates.PaymentAggregate.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExternalPaymentId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExternalPaymentId")
                        .IsUnique()
                        .HasFilter("external_payment_id IS NOT NULL");

                    b.HasIndex("Status");

                    b.ToTable("payments", "payment");
                });

            modelBuilder.Entity("Payment.Domain.Aggregates.PaymentAggregate.Payment", b =>
                {
                    b.OwnsOne("Payment.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments", "payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.OwnsOne("Payment.Domain.ValueObjects.OrderId", "OrderId", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("order_id");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments", "payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("OrderId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
