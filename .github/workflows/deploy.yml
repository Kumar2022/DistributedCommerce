name: Build and Deploy Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/distributed-commerce

jobs:
  # Build and test .NET services
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - ApiGateway
          - Identity
          - Catalog
          - Order
          - Payment
          - Inventory
          - Shipping
          - Notification
          - Analytics
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build service
        run: dotnet build --configuration Release --no-restore
        working-directory: src/Services/${{ matrix.service }}

      - name: Run tests
        run: dotnet test --no-restore --verbosity normal
        working-directory: tests/${{ matrix.service }}.Tests
        continue-on-error: true

  # Build Docker images
  docker-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - name: api-gateway
            path: ApiGateways/ApiGateway
          - name: identity-service
            path: Services/Identity/Identity.API
          - name: catalog-service
            path: Services/Catalog/Catalog.API
          - name: order-service
            path: Services/Order/Order.API
          - name: payment-service
            path: Services/Payment/Payment.API
          - name: inventory-service
            path: Services/Inventory/Inventory.API
          - name: shipping-service
            path: Services/Shipping/Shipping.API
          - name: notification-service
            path: Services/Notification/Notification.API
          - name: analytics-service
            path: Services/Analytics/Analytics.API

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: src/${{ matrix.service.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/catalog-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to development
  deploy-dev:
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.distributed-commerce.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Deploy to development
        run: |
          cd deployment/kubernetes
          kubectl apply -k overlays/dev
          kubectl rollout status deployment -n distributed-commerce-dev

  # Deploy to staging
  deploy-staging:
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.distributed-commerce.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          cd deployment/kubernetes
          kubectl apply -k overlays/staging
          kubectl rollout status deployment -n distributed-commerce-staging

  # Deploy to production (requires manual approval)
  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.distributed-commerce.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          cd deployment/kubernetes
          kubectl apply -k overlays/production
          kubectl rollout status deployment -n distributed-commerce-prod

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
