# Sealed Secrets Configuration (Alternative to External Secrets Operator)
# Encrypted secrets safe to store in Git

---
# Install Sealed Secrets Controller
# kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml

---
# Instructions to create sealed secrets:
# 1. Install kubeseal CLI:
#    brew install kubeseal  # macOS
#    wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/kubeseal-linux-amd64 -O kubeseal  # Linux
#
# 2. Create a regular secret (don't commit this):
#    kubectl create secret generic shared-secrets \
#      --from-literal=POSTGRES_PASSWORD=your-password \
#      --from-literal=JWT_SECRET_KEY=your-jwt-secret \
#      --dry-run=client -o yaml > temp-secret.yaml
#
# 3. Seal the secret:
#    kubeseal -f temp-secret.yaml -w sealed-secret.yaml
#
# 4. Delete temp file and commit sealed secret:
#    rm temp-secret.yaml
#    git add sealed-secret.yaml

---
# Example SealedSecret (this is safe to commit)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: shared-secrets
  namespace: distributed-commerce
spec:
  encryptedData:
    # These are encrypted values - safe to store in Git
    # Generate using: echo -n "your-secret" | kubeseal --raw --scope cluster-wide
    POSTGRES_PASSWORD: AgBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    JWT_SECRET_KEY: AgBYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
    STRIPE_SECRET_KEY: AgBZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
  template:
    metadata:
      name: shared-secrets
      namespace: distributed-commerce
    type: Opaque

---
# Script to rotate sealed secrets
# deployment/kubernetes/external-secrets/rotate-secrets.sh
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-script
  namespace: distributed-commerce
data:
  rotate-secrets.sh: |
    #!/bin/bash
    # Rotate all secrets
    
    # 1. Create new temporary secret
    kubectl create secret generic shared-secrets-new \
      --from-literal=POSTGRES_PASSWORD=$(openssl rand -base64 32) \
      --from-literal=JWT_SECRET_KEY=$(openssl rand -base64 64) \
      --dry-run=client -o yaml > temp-secret.yaml
    
    # 2. Seal the new secret
    kubeseal -f temp-secret.yaml -w sealed-secret-new.yaml
    
    # 3. Apply new sealed secret
    kubectl apply -f sealed-secret-new.yaml
    
    # 4. Rolling restart all services
    kubectl rollout restart deployment -n distributed-commerce
    
    # 5. Cleanup
    rm temp-secret.yaml
    mv sealed-secret-new.yaml sealed-secret.yaml
